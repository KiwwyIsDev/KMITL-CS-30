[ 1 3 4 2 ] 

i = 1 {
	key = 3
	j = 0
	false, 1 !> 3
	
} 
[ 1 3 4 2 ]

i = 2 { 
	key = 4
	j = 1
	false, 3 !> 4
}

[ 1 3 4 2 ]

i = 3 {
	key = 2
	j = 2
	true, 4 > 2
	loop {
		1 {
			[ 1 3 4 4 ]
			j--, j =1
		}
		2 { 
			[ 1 3 3 4 ]
			j--, j = 0
		}
		3 {
			out of loop
			1 !> 2
		}
		[ 1 2 3 4 ]
	}
}

--------------------
data = [ 1, 3, 4, 2, 10, 9 ]
/*### INIT ZONE ###*/
i_loop = 1
key = data[i]
j = i - 1 // backward of i 
easy for memorize 
find the j > key 
	or backward of i > i 
	like 4 > 2
		 j	 i

	then replace index j + 1 ( i ) with j
	like 4 2 to 4 4
	and j--
	and find j > key ( i index ) and j < 0 normally it not have if the backward not same the key
	now j = i - 2
	and last data [ j + 1 ] (it equal j - 1 in first) = key
	
/*### BRAIN COMPLIER ###*/
i found the index 2 > index 3
make it replace to [1, 3, 4, 4, 10, 9]
and forgot the i index it should be = 3 ( becase the insertion sort it looking the i and j - 1 and the i is main, data = 2
and first of j is i - 1 it will be 2, data = 4
then replaced it my j -= 1
now j = 1, data = 3 !> 4 out of loop
and last j in first ( j + 1 ) = 2 = key
[ 1, 3, 2, 4, 10, 9 ]
make i ++, now i = 4 
lets looking the index 4 now it nothing case 2 !> 4
replace in last line going to same index can ignore it if you dont trust (trust issue) let see it
(j - 1) + 1 = i and it replace with i is the same num why i said can ignore

go to see last loop is i = 5
10 > 9 is true then swap it
[ 1, 3, 2, 4, 10, 10]
j = 3 + 1
data[4] = key(9)
[ 1, 3, 2, 4, 9, 10 ]
 
 
and i overlook the index but is not problem go do it 
i = 2
j = 1
key = 2
[ 1, 3, 3, 4, 9, 10 ]
j = 0 + 1
data[1] = key
[ 1, 2, 3, 4, 9, 10 ]
it will sorted WOWOWOWO


// let do new section

data = [ 0, 1, 0, 1, 1, 0, 0, 0, 1 ]
look at index 2, 1 > 0
key = 0
i = 2 
j = 1
[ 0, 1, 1, 1, 1, 0, 0, 0, 1 ]
j-- 
j += 1 = key
[ 0, 0, 1, 1, 1, 0, 0, 0, 1 ]

i ++, i = 3
nothing
i ++, i = 4
noting 
i ++, i = 5
key = 0
j = 4
1 > 0
j + 1 = j
[ 0, 0, 1, 1, 1, 1, 0, 0, 1 ]
j--, j = 3
1 > 0
[ 0, 0, 1, 1, 1, 1, 0, 0, 1 ]
j--, j = 2
[ 0, 0, 1, 1, 1, 1, 0, 0, 1 ]
j--, j = 1 out of while 
data[1 + 1] = key
[ 0, 0, 0, 1, 1, 1, 0, 0, 1 ]

i ++, i = 6
key = 0
j = 5
1 > 0
[ 0, 0, 0, 1, 1, 1, 1, 0, 1 ]
j--, j = 4
[ 0, 0, 0, 1, 1, 1, 1, 0, 1 ]
j--, j = 3
[ 0, 0, 0, 1, 1, 1, 1, 0, 1 ]
j--, j = 2
data[2+1] = key
[ 0, 0, 0, 0, 1, 1, 1, 0, 1 ]
i ++, i = 7
key = 0
j = 6
1 > 0 
[ 0, 0, 0, 0, 1, 1, 1, 1, 1 ]
j--, j = 5
[ 0, 0, 0, 0, 1, 1, 1, 1, 1 ]
j--, j = 4
[ 0, 0, 0, 0, 1, 1, 1, 1, 1 ]
j--, j = 3
data[3+1] = key
[ 0, 0, 0, 0, 0, 1, 1, 1, 1 ]
